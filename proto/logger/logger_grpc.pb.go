// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggerRepoClient is the client API for LoggerRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerRepoClient interface {
	GetTail(ctx context.Context, in *GetTailRequest, opts ...grpc.CallOption) (*Log, error)
}

type loggerRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerRepoClient(cc grpc.ClientConnInterface) LoggerRepoClient {
	return &loggerRepoClient{cc}
}

func (c *loggerRepoClient) GetTail(ctx context.Context, in *GetTailRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := c.cc.Invoke(ctx, "/grpc_psql_example.proto.logger.LoggerRepo/GetTail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerRepoServer is the server API for LoggerRepo service.
// All implementations must embed UnimplementedLoggerRepoServer
// for forward compatibility
type LoggerRepoServer interface {
	GetTail(context.Context, *GetTailRequest) (*Log, error)
	mustEmbedUnimplementedLoggerRepoServer()
}

// UnimplementedLoggerRepoServer must be embedded to have forward compatible implementations.
type UnimplementedLoggerRepoServer struct {
}

func (UnimplementedLoggerRepoServer) GetTail(context.Context, *GetTailRequest) (*Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTail not implemented")
}
func (UnimplementedLoggerRepoServer) mustEmbedUnimplementedLoggerRepoServer() {}

// UnsafeLoggerRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerRepoServer will
// result in compilation errors.
type UnsafeLoggerRepoServer interface {
	mustEmbedUnimplementedLoggerRepoServer()
}

func RegisterLoggerRepoServer(s grpc.ServiceRegistrar, srv LoggerRepoServer) {
	s.RegisterService(&LoggerRepo_ServiceDesc, srv)
}

func _LoggerRepo_GetTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerRepoServer).GetTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_psql_example.proto.logger.LoggerRepo/GetTail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerRepoServer).GetTail(ctx, req.(*GetTailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoggerRepo_ServiceDesc is the grpc.ServiceDesc for LoggerRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggerRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_psql_example.proto.logger.LoggerRepo",
	HandlerType: (*LoggerRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTail",
			Handler:    _LoggerRepo_GetTail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logger/logger.proto",
}
