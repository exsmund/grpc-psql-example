// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggerRepoClient is the client API for LoggerRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerRepoClient interface {
	GetTail(ctx context.Context, in *GetTailRequest, opts ...grpc.CallOption) (LoggerRepo_GetTailClient, error)
}

type loggerRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerRepoClient(cc grpc.ClientConnInterface) LoggerRepoClient {
	return &loggerRepoClient{cc}
}

func (c *loggerRepoClient) GetTail(ctx context.Context, in *GetTailRequest, opts ...grpc.CallOption) (LoggerRepo_GetTailClient, error) {
	stream, err := c.cc.NewStream(ctx, &LoggerRepo_ServiceDesc.Streams[0], "/grpc_psql_example.proto.logger.LoggerRepo/GetTail", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerRepoGetTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LoggerRepo_GetTailClient interface {
	Recv() (*LogRow, error)
	grpc.ClientStream
}

type loggerRepoGetTailClient struct {
	grpc.ClientStream
}

func (x *loggerRepoGetTailClient) Recv() (*LogRow, error) {
	m := new(LogRow)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggerRepoServer is the server API for LoggerRepo service.
// All implementations must embed UnimplementedLoggerRepoServer
// for forward compatibility
type LoggerRepoServer interface {
	GetTail(*GetTailRequest, LoggerRepo_GetTailServer) error
	mustEmbedUnimplementedLoggerRepoServer()
}

// UnimplementedLoggerRepoServer must be embedded to have forward compatible implementations.
type UnimplementedLoggerRepoServer struct {
}

func (UnimplementedLoggerRepoServer) GetTail(*GetTailRequest, LoggerRepo_GetTailServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTail not implemented")
}
func (UnimplementedLoggerRepoServer) mustEmbedUnimplementedLoggerRepoServer() {}

// UnsafeLoggerRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerRepoServer will
// result in compilation errors.
type UnsafeLoggerRepoServer interface {
	mustEmbedUnimplementedLoggerRepoServer()
}

func RegisterLoggerRepoServer(s grpc.ServiceRegistrar, srv LoggerRepoServer) {
	s.RegisterService(&LoggerRepo_ServiceDesc, srv)
}

func _LoggerRepo_GetTail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerRepoServer).GetTail(m, &loggerRepoGetTailServer{stream})
}

type LoggerRepo_GetTailServer interface {
	Send(*LogRow) error
	grpc.ServerStream
}

type loggerRepoGetTailServer struct {
	grpc.ServerStream
}

func (x *loggerRepoGetTailServer) Send(m *LogRow) error {
	return x.ServerStream.SendMsg(m)
}

// LoggerRepo_ServiceDesc is the grpc.ServiceDesc for LoggerRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggerRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_psql_example.proto.logger.LoggerRepo",
	HandlerType: (*LoggerRepoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTail",
			Handler:       _LoggerRepo_GetTail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/logger/logger.proto",
}
