// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRepoClient is the client API for UserRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRepoClient interface {
	SaveUser(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*SaveUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (UserRepo_GetUsersClient, error)
}

type userRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRepoClient(cc grpc.ClientConnInterface) UserRepoClient {
	return &userRepoClient{cc}
}

func (c *userRepoClient) SaveUser(ctx context.Context, in *SaveUserRequest, opts ...grpc.CallOption) (*SaveUserResponse, error) {
	out := new(SaveUserResponse)
	err := c.cc.Invoke(ctx, "/grpc_psql_example.proto.user.UserRepo/SaveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/grpc_psql_example.proto.user.UserRepo/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepoClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (UserRepo_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserRepo_ServiceDesc.Streams[0], "/grpc_psql_example.proto.user.UserRepo/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userRepoGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserRepo_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userRepoGetUsersClient struct {
	grpc.ClientStream
}

func (x *userRepoGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserRepoServer is the server API for UserRepo service.
// All implementations must embed UnimplementedUserRepoServer
// for forward compatibility
type UserRepoServer interface {
	SaveUser(context.Context, *SaveUserRequest) (*SaveUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUsers(*GetUsersRequest, UserRepo_GetUsersServer) error
	mustEmbedUnimplementedUserRepoServer()
}

// UnimplementedUserRepoServer must be embedded to have forward compatible implementations.
type UnimplementedUserRepoServer struct {
}

func (UnimplementedUserRepoServer) SaveUser(context.Context, *SaveUserRequest) (*SaveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedUserRepoServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserRepoServer) GetUsers(*GetUsersRequest, UserRepo_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserRepoServer) mustEmbedUnimplementedUserRepoServer() {}

// UnsafeUserRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRepoServer will
// result in compilation errors.
type UnsafeUserRepoServer interface {
	mustEmbedUnimplementedUserRepoServer()
}

func RegisterUserRepoServer(s grpc.ServiceRegistrar, srv UserRepoServer) {
	s.RegisterService(&UserRepo_ServiceDesc, srv)
}

func _UserRepo_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_psql_example.proto.user.UserRepo/SaveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).SaveUser(ctx, req.(*SaveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepoServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_psql_example.proto.user.UserRepo/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepoServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepo_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserRepoServer).GetUsers(m, &userRepoGetUsersServer{stream})
}

type UserRepo_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userRepoGetUsersServer struct {
	grpc.ServerStream
}

func (x *userRepoGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// UserRepo_ServiceDesc is the grpc.ServiceDesc for UserRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_psql_example.proto.user.UserRepo",
	HandlerType: (*UserRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUser",
			Handler:    _UserRepo_SaveUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserRepo_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _UserRepo_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/user/user.proto",
}
